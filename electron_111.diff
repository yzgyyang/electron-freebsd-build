diff --git a/atom/app/atom_main.cc b/atom/app/atom_main.cc
index 9c255db..6ebb03f 100644
--- a/atom/app/atom_main.cc
+++ b/atom/app/atom_main.cc
@@ -20,7 +20,7 @@
 #include "base/win/windows_version.h"
 #include "content/public/app/sandbox_helper_win.h"
 #include "sandbox/win/src/sandbox_types.h"
-#elif defined(OS_LINUX)  // defined(OS_WIN)
+#elif defined(OS_LINUX)  || defined(OS_FREEBSD) // defined(OS_WIN)
 #include "atom/app/atom_main_delegate.h"  // NOLINT
 #include "content/public/app/content_main.h"
 #else  // defined(OS_LINUX)
@@ -115,7 +115,7 @@ int APIENTRY wWinMain(HINSTANCE instance, HINSTANCE, wchar_t* cmd, int) {
   return content::ContentMain(params);
 }
 
-#elif defined(OS_LINUX)  // defined(OS_WIN)
+#elif defined(OS_LINUX) || defined(OS_FREEBSD)// defined(OS_WIN)
 
 int main(int argc, const char* argv[]) {
   if (IsEnvSet(kRunAsNode)) {
diff --git a/atom/app/atom_main_delegate.cc b/atom/app/atom_main_delegate.cc
index 2d31b1c..b54f16a 100644
--- a/atom/app/atom_main_delegate.cc
+++ b/atom/app/atom_main_delegate.cc
@@ -85,7 +85,7 @@ bool AtomMainDelegate::BasicStartupComplete(int* exit_code) {
 
   // Enable convient stack printing.
   bool enable_stack_dumping = env->HasVar("ELECTRON_ENABLE_STACK_DUMPING");
-#if defined(DEBUG) && defined(OS_LINUX)
+#if defined(DEBUG) && (defined(OS_LINUX) || defined(OS_FREEBSD))
   enable_stack_dumping = true;
 #endif
   if (enable_stack_dumping)
diff --git a/atom/browser/api/atom_api_app.cc b/atom/browser/api/atom_api_app.cc
index 751293e..f10ce99 100644
--- a/atom/browser/api/atom_api_app.cc
+++ b/atom/browser/api/atom_api_app.cc
@@ -617,7 +617,7 @@ void App::SetPath(mate::Arguments* args,
 }
 
 void App::SetDesktopName(const std::string& desktop_name) {
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
   std::unique_ptr<base::Environment> env(base::Environment::Create());
   env->SetVar("CHROME_DESKTOP", desktop_name);
 #endif
@@ -845,7 +845,7 @@ void App::BuildPrototype(
       .SetMethod("getJumpListSettings", &App::GetJumpListSettings)
       .SetMethod("setJumpList", &App::SetJumpList)
 #endif
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
       .SetMethod("isUnityRunning",
                  base::Bind(&Browser::IsUnityRunning, browser))
 #endif
diff --git a/atom/browser/atom_browser_main_parts_posix.cc b/atom/browser/atom_browser_main_parts_posix.cc
index 8c96f91..22b4784 100644
--- a/atom/browser/atom_browser_main_parts_posix.cc
+++ b/atom/browser/atom_browser_main_parts_posix.cc
@@ -183,6 +183,9 @@ void AtomBrowserMainParts::HandleShutdownSignals() {
     g_pipe_pid = getpid();
     g_shutdown_pipe_read_fd = pipefd[0];
     g_shutdown_pipe_write_fd = pipefd[1];
+#if defined (__FreeBSD__)
+    const size_t kShutdownDetectorThreadStackSize = 0;
+#else
 #if !defined(ADDRESS_SANITIZER) && !defined(KEEP_SHADOW_STACKS)
     const size_t kShutdownDetectorThreadStackSize = PTHREAD_STACK_MIN * 2;
 #else
@@ -191,6 +194,7 @@ void AtomBrowserMainParts::HandleShutdownSignals() {
     // size to avoid hitting the guard page.
     const size_t kShutdownDetectorThreadStackSize = PTHREAD_STACK_MIN * 4;
 #endif
+#endif
     // TODO(viettrungluu,willchan): crbug.com/29675 - This currently leaks, so
     // if you change this, you'll probably need to change the suppression.
     if (!base::PlatformThread::CreateNonJoinable(
diff --git a/atom/browser/browser.h b/atom/browser/browser.h
index 5bb2500..28654f5 100644
--- a/atom/browser/browser.h
+++ b/atom/browser/browser.h
@@ -167,7 +167,7 @@ class Browser : public WindowListObserver {
   PCWSTR GetAppUserModelID();
 #endif  // defined(OS_WIN)
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
   // Whether Unity launcher is running.
   bool IsUnityRunning();
 #endif  // defined(OS_LINUX)
diff --git a/atom/browser/native_window.cc b/atom/browser/native_window.cc
index 3b836d9..02d154a 100644
--- a/atom/browser/native_window.cc
+++ b/atom/browser/native_window.cc
@@ -40,7 +40,7 @@
 #include "ui/gfx/geometry/size_conversions.h"
 #include "ui/gl/gpu_switching_manager.h"
 
-#if defined(OS_LINUX) || defined(OS_WIN)
+#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_FREEBSD)
 #include "content/public/common/renderer_preferences.h"
 #include "ui/gfx/font_render_params.h"
 #endif
@@ -72,7 +72,7 @@ NativeWindow::NativeWindow(
   if (parent)
     options.Get("modal", &is_modal_);
 
-#if defined(OS_LINUX) || defined(OS_WIN)
+#if defined(OS_LINUX) || defined(OS_WIN) || defined(OS_FREEBSD)
   auto* prefs = web_contents()->GetMutableRendererPrefs();
 
   // Update font settings.
diff --git a/atom/browser/relauncher_linux.cc b/atom/browser/relauncher_linux.cc
index 6d60b07..838fcbf 100644
--- a/atom/browser/relauncher_linux.cc
+++ b/atom/browser/relauncher_linux.cc
@@ -6,8 +6,10 @@
 
 #include <fcntl.h>
 #include <signal.h>
+#if !defined(__FreeBSD__)
 #include <sys/prctl.h>
 #include <sys/signalfd.h>
+#endif
 
 #include "base/files/file_util.h"
 #include "base/files/scoped_file.h"
@@ -31,6 +33,10 @@ void RelauncherSynchronizeWithParent() {
     return;
   }
 
+#if defined(__FreeBSD__)
+  PLOG(ERROR) <<"signalfd & prctl";
+  fprintf(stderr, "Not Implemented ignalfd & prctl in atom/browser/relauncher_linux.cc");
+#else
   // Create a signalfd that watches for SIGUSR2.
   int usr2_fd = signalfd(-1, &mask, 0);
   if (usr2_fd < 0) {
@@ -53,6 +59,7 @@ void RelauncherSynchronizeWithParent() {
   // Wait the SIGUSR2 signal to happen.
   struct signalfd_siginfo si;
   HANDLE_EINTR(read(usr2_fd, &si, sizeof(si)));
+#endif
 }
 
 int LaunchProgram(const StringVector& relauncher_args,
diff --git a/atom/browser/ui/views/submenu_button.cc b/atom/browser/ui/views/submenu_button.cc
index ca06d7d..d0d99cc 100644
--- a/atom/browser/ui/views/submenu_button.cc
+++ b/atom/browser/ui/views/submenu_button.cc
@@ -35,7 +35,7 @@ SubmenuButton::SubmenuButton(views::ButtonListener* listener,
       text_width_(0),
       text_height_(0),
       underline_color_(SK_ColorBLACK), 
       background_color_(background_color) {
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
   // Dont' use native style border.
   SetBorder(std::move(CreateDefaultBorder()));
 #endif
diff --git a/atom/common/api/atom_bindings.cc b/atom/common/api/atom_bindings.cc
index cf80d64..f6592ea 100644
--- a/atom/common/api/atom_bindings.cc
+++ b/atom/common/api/atom_bindings.cc
@@ -53,6 +53,7 @@ v8::Local<v8::Value> GetProcessMemoryInfo(v8::Isolate* isolate) {
 
 v8::Local<v8::Value> GetSystemMemoryInfo(v8::Isolate* isolate,
                                          mate::Arguments* args) {
+#if !defined(OS_FREEBSD)
   base::SystemMemoryInfoKB mem_info;
   if (!base::GetSystemMemoryInfo(&mem_info)) {
     args->ThrowError("Unable to retrieve system memory information");
@@ -69,6 +70,13 @@ v8::Local<v8::Value> GetSystemMemoryInfo(v8::Isolate* isolate,
   dict.Set("swapFree", mem_info.swap_free);
 #endif
 
+#else //!OS_FREEBSD
+  mate::Dictionary dict = mate::Dictionary::CreateEmpty(isolate);
+  dict.Set("total", 0);
+  dict.Set("free", 0);
+  dict.Set("swapTotal", 0);
+  dict.Set("swapFree", 0);
+#endif
   return dict.GetHandle();
 }
 
diff --git a/atom/common/atom_command_line.cc b/atom/common/atom_command_line.cc
index 08880ff..3fa8d79 100644
--- a/atom/common/atom_command_line.cc
+++ b/atom/common/atom_command_line.cc
@@ -35,7 +35,7 @@ void AtomCommandLine::InitW(int argc, const wchar_t* const* argv) {
 }
 #endif
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
 // static
 void AtomCommandLine::InitializeFromCommandLine() {
   argv_ = base::CommandLine::ForCurrentProcess()->argv();
diff --git a/atom/common/atom_command_line.h b/atom/common/atom_command_line.h
index a834ce9..b5adc00 100644
--- a/atom/common/atom_command_line.h
+++ b/atom/common/atom_command_line.h
@@ -24,7 +24,7 @@ class AtomCommandLine {
   static std::vector<std::wstring> wargv() { return wargv_; }
 #endif
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
   // On Linux the command line has to be read from base::CommandLine since
   // it is using zygote.
   static void InitializeFromCommandLine();
diff --git a/atom/common/node_bindings.cc b/atom/common/node_bindings.cc
index d6ad804..91134af 100644
--- a/atom/common/node_bindings.cc
+++ b/atom/common/node_bindings.cc
@@ -130,7 +130,7 @@ void NodeBindings::Initialize() {
   node::g_standalone_mode = is_browser_;
   node::g_upstream_node_mode = false;
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
   // Get real command line in renderer process forked by zygote.
   if (!is_browser_)
     AtomCommandLine::InitializeFromCommandLine();
diff --git a/atom/common/node_bindings_linux.cc b/atom/common/node_bindings_linux.cc
index 34b9ea9..cf2bc26 100644
--- a/atom/common/node_bindings_linux.cc
+++ b/atom/common/node_bindings_linux.cc
@@ -3,19 +3,34 @@
 // found in the LICENSE file.
 
 #include "atom/common/node_bindings_linux.h"
-
+#if !defined(OS_FREEBSD)
 #include <sys/epoll.h>
+#else
+#include <errno.h>
+#include <sys/select.h>
+#include <sys/sysctl.h>
+#include <sys/time.h>
+#include <sys/types.h>
+
+#endif
 
 namespace atom {
 
 NodeBindingsLinux::NodeBindingsLinux(BrowserEnvironment browser_env)
+#if !defined(OS_FREEBSD)
     : NodeBindings(browser_env),
-      epoll_(epoll_create(1)) {
+     epoll_(epoll_create(1)) {
+#else
+	: NodeBindings(browser_env) {
+#endif
+#if !defined(OS_FREEBSD)
   int backend_fd = uv_backend_fd(uv_loop_);
+
   struct epoll_event ev = { 0 };
   ev.events = EPOLLIN;
   ev.data.fd = backend_fd;
   epoll_ctl(epoll_, EPOLL_CTL_ADD, backend_fd, &ev);
+#endif
 }
 
 NodeBindingsLinux::~NodeBindingsLinux() {
@@ -39,14 +54,37 @@
 }
 
 void NodeBindingsLinux::PollEvents() {
+#if !defined(OS_FREEBSD)
   int timeout = uv_backend_timeout(uv_loop_);
 
   // Wait for new libuv events.
   int r;
+
   do {
     struct epoll_event ev;
     r = epoll_wait(epoll_, &ev, 1, timeout);
+
+  } while (r == -1 && errno == EINTR);
+#else
+struct timeval tv;
+  int timeout = uv_backend_timeout(uv_loop_);
+  if (timeout != -1) {
+    tv.tv_sec = timeout / 1000;
+    tv.tv_usec = (timeout % 1000) * 1000;
+  }
+
+  fd_set readset;
+  int fd = uv_backend_fd(uv_loop_);
+  FD_ZERO(&readset);
+  FD_SET(fd, &readset);
+
+  // Wait for new libuv events.
+  int r;
+  do {
+    r = select(fd + 1, &readset, nullptr, nullptr,
+               timeout == -1 ? nullptr : &tv);
   } while (r == -1 && errno == EINTR);
+#endif
 }
 
 // static
diff --git a/atom/renderer/api/atom_api_spell_check_client.cc b/atom/renderer/api/atom_api_spell_check_client.cc
index 08f36ef..fa7f6fc 100644
--- a/atom/renderer/api/atom_api_spell_check_client.cc
+++ b/atom/renderer/api/atom_api_spell_check_client.cc
@@ -11,7 +11,7 @@
 #include "base/logging.h"
 #include "native_mate/converter.h"
 #include "native_mate/dictionary.h"
-#include "third_party/icu/source/common/unicode/uscript.h"
+#include "unicode/uscript.h"
 #include "third_party/WebKit/public/web/WebTextCheckingCompletion.h"
 #include "third_party/WebKit/public/web/WebTextCheckingResult.h"
 
diff --git a/chromium_src/chrome/browser/process_singleton_posix.cc b/chromium_src/chrome/browser/process_singleton_posix.cc
index bb999fb..22f7eda 100644
--- a/chromium_src/chrome/browser/process_singleton_posix.cc
+++ b/chromium_src/chrome/browser/process_singleton_posix.cc
@@ -82,7 +82,7 @@
 #include "net/base/network_interfaces.h"
 #include "ui/base/l10n/l10n_util.h"
 
-#if defined(TOOLKIT_VIEWS) && defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if defined(TOOLKIT_VIEWS) && (defined(OS_LINUX) || defined(OS_FREEBSD)) && !defined(OS_CHROMEOS)
 #include "ui/views/linux_ui/linux_ui.h"
 #endif
 
@@ -856,7 +856,7 @@ ProcessSingleton::NotifyResult ProcessSingleton::NotifyOtherProcessWithTimeout(
     // The other process is shutting down, it's safe to start a new process.
     return PROCESS_NONE;
   } else if (strncmp(buf, kACKToken, arraysize(kACKToken) - 1) == 0) {
-#if defined(TOOLKIT_VIEWS) && defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if defined(TOOLKIT_VIEWS) && (defined(OS_LINUX) || defined(OS_FREEBSD)) && !defined(OS_CHROMEOS)
     // Likely NULL in unit tests.
     views::LinuxUI* linux_ui = views::LinuxUI::instance();
     if (linux_ui)
diff --git a/chromium_src/chrome/common/chrome_paths.cc b/chromium_src/chrome/common/chrome_paths.cc
index 293ea26..ae4431c 100644
--- a/chromium_src/chrome/common/chrome_paths.cc
+++ b/chromium_src/chrome/common/chrome_paths.cc
@@ -51,7 +51,7 @@ const base::FilePath::CharType kFlashSystemPluginName[] =
 const base::FilePath::CharType kInternalNaClPluginFileName[] =
     FILE_PATH_LITERAL("internal-nacl-plugin");
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
 // The path to the external extension <id>.json files.
 // /usr/share seems like a good choice, see: http://www.pathname.com/fhs/
 const base::FilePath::CharType kFilepathSinglePrefExtensions[] =
@@ -177,7 +177,7 @@ bool PathProvider(int key, base::FilePath* result) {
         return false;
       break;
     case chrome::DIR_DEFAULT_DOWNLOADS_SAFE:
-#if defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_FREEBSD)
       if (!GetUserDownloadsDirectorySafe(&cur))
         return false;
       break;
@@ -419,7 +419,7 @@ bool PathProvider(int key, base::FilePath* result) {
       break;
 #endif
 #if defined(ENABLE_SUPERVISED_USERS)
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
     case chrome::DIR_SUPERVISED_USERS_DEFAULT_APPS:
       if (!PathService::Get(chrome::DIR_STANDALONE_EXTERNAL_EXTENSIONS, &cur))
         return false;
@@ -493,7 +493,7 @@ bool PathProvider(int key, base::FilePath* result) {
       break;
     }
 #endif
-#if defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(CHROMIUM_BUILD)) || \
+#if defined(OS_CHROMEOS) || ((defined(OS_LINUX) || defined(OS_FREEBSD)) && defined(CHROMIUM_BUILD)) || \
     (defined(OS_MACOSX) && !defined(OS_IOS))
     case chrome::DIR_USER_EXTERNAL_EXTENSIONS: {
       if (!PathService::Get(chrome::DIR_USER_DATA, &cur))
@@ -502,7 +502,7 @@ bool PathProvider(int key, base::FilePath* result) {
       break;
     }
 #endif
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
     case chrome::DIR_STANDALONE_EXTERNAL_EXTENSIONS: {
       cur = base::FilePath(kFilepathSinglePrefExtensions);
       break;
@@ -537,7 +537,7 @@ bool PathProvider(int key, base::FilePath* result) {
 #endif
       break;
 
-#if defined(OS_LINUX) || (defined(OS_MACOSX) && !defined(OS_IOS))
+#if defined(OS_LINUX) || defined(OS_FREEBSD) || (defined(OS_MACOSX) && !defined(OS_IOS))
     case chrome::DIR_NATIVE_MESSAGING:
 #if defined(OS_MACOSX)
 #if defined(GOOGLE_CHROME_BUILD)
@@ -571,7 +571,7 @@ bool PathProvider(int key, base::FilePath* result) {
       cur = cur.Append(kGCMStoreDirname);
       break;
 #endif  // !defined(OS_ANDROID)
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
     case chrome::FILE_COMPONENT_FLASH_HINT:
       if (!PathService::Get(chrome::DIR_COMPONENT_UPDATED_PEPPER_FLASH_PLUGIN,
                             &cur)) {
diff --git a/chromium_src/chrome/common/chrome_paths.h b/chromium_src/chrome/common/chrome_paths.h
index 581fdc0..83747c7 100644
--- a/chromium_src/chrome/common/chrome_paths.h
+++ b/chromium_src/chrome/common/chrome_paths.h
@@ -50,7 +50,7 @@ enum {
   DIR_USER_APPLICATIONS,        // ~/Applications
   DIR_USER_LIBRARY,             // ~/Library
 #endif
-#if defined(OS_CHROMEOS) || (defined(OS_LINUX) && defined(CHROMIUM_BUILD)) || \
+#if defined(OS_CHROMEOS) || ((defined(OS_LINUX) || defined(OS_FREEBSD)) && defined(CHROMIUM_BUILD)) || \
     (defined(OS_MACOSX) && !defined(OS_IOS))
   DIR_USER_EXTERNAL_EXTENSIONS,  // Directory for per-user external extensions
                                  // on Chrome Mac and Chromium Linux.
@@ -59,7 +59,7 @@ enum {
                                  // create it.
 #endif
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
   DIR_STANDALONE_EXTERNAL_EXTENSIONS,  // Directory for 'per-extension'
                                        // definition manifest files that
                                        // describe extensions which are to be
@@ -117,7 +117,7 @@ enum {
   DIR_SUPERVISED_USER_INSTALLED_WHITELISTS,  // Directory where sanitized
                                              // supervised user whitelists are
                                              // installed.
-#if defined(OS_LINUX) || (defined(OS_MACOSX) && !defined(OS_IOS))
+#if defined(OS_LINUX) || defined(OS_FREEBSD) || (defined(OS_MACOSX) && !defined(OS_IOS))
   DIR_NATIVE_MESSAGING,         // System directory where native messaging host
                                 // manifest files are stored.
   DIR_USER_NATIVE_MESSAGING,    // Directory with Native Messaging Hosts
@@ -132,7 +132,7 @@ enum {
   DIR_GEN_TEST_DATA,            // Directory where generated test data resides.
   DIR_TEST_DATA,                // Directory where unit test data resides.
   DIR_TEST_TOOLS,               // Directory where unit test tools reside.
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
   FILE_COMPONENT_FLASH_HINT,    // A file in a known location that points to
                                 // the component updated flash plugin.
 #endif // defined(OS_LINUX)
diff --git a/chromium_src/chrome/common/chrome_paths_internal.h b/chromium_src/chrome/common/chrome_paths_internal.h
index ae1cd62..3205337 100644
--- a/chromium_src/chrome/common/chrome_paths_internal.h
+++ b/chromium_src/chrome/common/chrome_paths_internal.h
@@ -39,7 +39,7 @@ void GetUserCacheDirectory(const base::FilePath& profile_dir, base::FilePath* re
 // Get the path to the user's documents directory.
 bool GetUserDocumentsDirectory(base::FilePath* result);
 
-#if defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_FREEBSD)
 // Gets the path to a safe default download directory for a user.
 bool GetUserDownloadsDirectorySafe(base::FilePath* result);
 #endif
diff --git a/chromium_src/chrome/renderer/pepper/pepper_flash_font_file_host.cc b/chromium_src/chrome/renderer/pepper/pepper_flash_font_file_host.cc
index c109709..976279c 100644
--- a/chromium_src/chrome/renderer/pepper/pepper_flash_font_file_host.cc
+++ b/chromium_src/chrome/renderer/pepper/pepper_flash_font_file_host.cc
@@ -14,7 +14,7 @@
 #include "ppapi/proxy/ppapi_messages.h"
 #include "ppapi/proxy/serialized_structs.h"
 
-#if defined(OS_LINUX) || defined(OS_OPENBSD)
+#if defined(OS_LINUX) || defined(OS_OPENBSD) || defined(OS_FREEBSD)
 #include "content/public/child/child_process_sandbox_support_linux.h"
 #include "content/public/common/common_sandbox_support_linux.h"
 #elif defined(OS_WIN)
@@ -27,7 +27,7 @@ PepperFlashFontFileHost::PepperFlashFontFileHost(
     const ppapi::proxy::SerializedFontDescription& description,
     PP_PrivateFontCharset charset)
     : ResourceHost(host->GetPpapiHost(), instance, resource) {
-#if defined(OS_LINUX) || defined(OS_OPENBSD)
+#if defined(OS_LINUX) || defined(OS_OPENBSD) || defined(OS_FREEBSD)
   fd_.reset(content::MatchFontWithFallback(
       description.face.c_str(),
       description.weight >= PP_BROWSERFONT_TRUSTED_WEIGHT_BOLD,
@@ -62,7 +62,7 @@ bool PepperFlashFontFileHost::GetFontData(uint32_t table,
                                           void* buffer,
                                           size_t* length) {
   bool result = false;
-#if defined(OS_LINUX) || defined(OS_OPENBSD)
+#if defined(OS_LINUX) || defined(OS_OPENBSD) || defined(OS_FREEBSD)
   int fd = fd_.get();
   if (fd != -1)
     result = content::GetFontTable(fd, table, 0 /* offset */,
diff --git a/chromium_src/chrome/renderer/pepper/pepper_flash_font_file_host.h b/chromium_src/chrome/renderer/pepper/pepper_flash_font_file_host.h
index 0205a69..a2e0d8f 100644
--- a/chromium_src/chrome/renderer/pepper/pepper_flash_font_file_host.h
+++ b/chromium_src/chrome/renderer/pepper/pepper_flash_font_file_host.h
@@ -8,7 +8,7 @@
 #include "ppapi/c/private/pp_private_font_charset.h"
 #include "ppapi/host/resource_host.h"
 
-#if defined(OS_LINUX) || defined(OS_OPENBSD)
+#if defined(OS_LINUX) || defined(OS_OPENBSD) || defined(OS_FREEBSD)
 #include "base/files/scoped_file.h"
 #elif defined(OS_WIN)
 #include "third_party/skia/include/core/SkRefCnt.h"
@@ -44,7 +44,7 @@ class PepperFlashFontFileHost : public ppapi::host::ResourceHost {
                          uint32_t table);
   bool GetFontData(uint32_t table, void* buffer, size_t* length);
 
-#if defined(OS_LINUX) || defined(OS_OPENBSD)
+#if defined(OS_LINUX) || defined(OS_OPENBSD) || defined(OS_FREEBSD)
   base::ScopedFD fd_;
 #elif defined(OS_WIN)
   sk_sp<SkTypeface> typeface_;
diff --git a/chromium_src/chrome/renderer/printing/print_web_view_helper.h b/chromium_src/chrome/renderer/printing/print_web_view_helper.h
index 0a00f2e..b1f1f8f 100644
--- a/chromium_src/chrome/renderer/printing/print_web_view_helper.h
+++ b/chromium_src/chrome/renderer/printing/print_web_view_helper.h
@@ -175,7 +175,7 @@ class PrintWebViewHelper
   void FinishFramePrinting();
 
   // Prints the page listed in |params|.
-#if defined(OS_LINUX) || defined(OS_ANDROID)
+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_FREEBSD)
   void PrintPageInternal(const PrintMsg_PrintPage_Params& params,
                          blink::WebFrame* frame,
                          PdfMetafileSkia* metafile);
diff --git a/chromium_src/chrome/renderer/spellchecker/spellcheck_worditerator.cc b/chromium_src/chrome/renderer/spellchecker/spellcheck_worditerator.cc
index 46465f4..425e76e 100644
--- a/chromium_src/chrome/renderer/spellchecker/spellcheck_worditerator.cc
+++ b/chromium_src/chrome/renderer/spellchecker/spellcheck_worditerator.cc
@@ -13,10 +13,10 @@
 #include "base/logging.h"
 #include "base/strings/stringprintf.h"
 #include "base/strings/utf_string_conversions.h"
-#include "third_party/icu/source/common/unicode/normlzr.h"
-#include "third_party/icu/source/common/unicode/schriter.h"
-#include "third_party/icu/source/common/unicode/uscript.h"
-#include "third_party/icu/source/i18n/unicode/ulocdata.h"
+#include "unicode/normlzr.h"
+#include "unicode/schriter.h"
+#include "unicode/uscript.h"
+#include "unicode/ulocdata.h"
 
 // SpellcheckCharAttribute implementation:
 
diff --git a/chromium_src/chrome/renderer/spellchecker/spellcheck_worditerator.h b/chromium_src/chrome/renderer/spellchecker/spellcheck_worditerator.h
index 7e07d29..f90c8a1 100644
--- a/chromium_src/chrome/renderer/spellchecker/spellcheck_worditerator.h
+++ b/chromium_src/chrome/renderer/spellchecker/spellcheck_worditerator.h
@@ -14,7 +14,7 @@
 
 #include "base/macros.h"
 #include "base/strings/string16.h"
-#include "third_party/icu/source/common/unicode/uscript.h"
+#include "unicode/uscript.h"
 
 namespace base {
 namespace i18n {
diff --git a/chromium_src/library_loaders/libspeechd.h b/chromium_src/library_loaders/libspeechd.h
index f7b2762..57224a9 100644
--- a/chromium_src/library_loaders/libspeechd.h
+++ b/chromium_src/library_loaders/libspeechd.h
@@ -4,7 +4,7 @@
 #ifndef LIBRARY_LOADER_OUT_RELEASE_GEN_LIBRARY_LOADERS_LIBSPEECHD_H
 #define LIBRARY_LOADER_OUT_RELEASE_GEN_LIBRARY_LOADERS_LIBSPEECHD_H
 
-#include "third_party/speech-dispatcher/libspeechd.h"
+#include "speech-dispatcher/libspeechd.h"
 #define LIBRARY_LOADER_OUT_RELEASE_GEN_LIBRARY_LOADERS_LIBSPEECHD_H_DLOPEN
 
 
diff --git a/electron.gyp b/electron.gyp
index 96cb6b9..4d38b2e 100644
--- a/electron.gyp	2017-12-08 09:54:03.042046000 +0400
+++ b/electron.gyp	2017-12-08 10:33:02.667531000 +0400
@@ -174,9 +174,44 @@
           ],
         }, {
           'dependencies': [
-            'vendor/breakpad/breakpad.gyp:dump_syms#host',
+           # 'vendor/breakpad/breakpad.gyp:dump_syms#host',
           ],
         }],  # OS=="win"
+         ['OS=="freebsd"', {
+          'copies': [
+            {
+              'variables': {
+                'conditions': [
+                  ['libchromiumcontent_component', {
+                    'copied_libraries': [
+                      '<(PRODUCT_DIR)/lib/libnode.so',
+                      '<@(libchromiumcontent_shared_libraries)',
+                      '<@(libchromiumcontent_shared_v8_libraries)',
+                    ],
+                  }, {
+                    'copied_libraries': [
+                      '<(PRODUCT_DIR)/lib/libnode.so',
+                      '<(libchromiumcontent_dir)/libffmpeg.so',
+                    ],
+                  }],
+                ],
+              },
+              'destination': '<(PRODUCT_DIR)',
+              'files': [
+                '<@(copied_libraries)',
+                '<(libchromiumcontent_dir)/locales',
+                '<(libchromiumcontent_dir)/icudtl.dat',
+                '<(libchromiumcontent_dir)/blink_image_resources_200_percent.pak',
+                '<(libchromiumcontent_dir)/content_resources_200_percent.pak',
+                '<(libchromiumcontent_dir)/content_shell.pak',
+                '<(libchromiumcontent_dir)/ui_resources_200_percent.pak',
+                '<(libchromiumcontent_dir)/views_resources_200_percent.pak',
+                '<(libchromiumcontent_dir)/natives_blob.bin',
+                '<(libchromiumcontent_dir)/snapshot_blob.bin',
+              ],
+            },
+          ],
+        }],  # OS=="freebsd"
         ['OS=="linux"', {
           'copies': [
             {
@@ -336,6 +371,28 @@
             'atom/common/crash_reporter/crash_reporter_mac.mm',
           ],
         }],  # OS=="mac" and mas_build==1
+        ['OS=="freebsd"', {
+          'sources': [
+            '<@(lib_sources_linux)',
+            '<@(lib_sources_nss)',
+          ],
+           'sources!': [
+            'atom/common/crash_reporter/crash_reporter_linux.h',
+            'atom/common/crash_reporter/crash_reporter_linux.cc',
+            'atom/common/crash_reporter/linux/crash_dump_handler.cc',
+            'atom/common/crash_reporter/linux/crash_dump_handler.h',
+          ],
+          'link_settings': {
+            'ldflags': [
+              # Make binary search for libraries under current directory, so we
+              # don't have to manually set $LD_LIBRARY_PATH:
+              # http://serverfault.com/questions/279068/cant-find-so-in-the-same-directory-as-the-executable
+              '-rpath \$$ORIGIN',
+              # Make native module dynamic loading work.
+              '-rdynamic',
+            ],
+          },
+        }],  # OS=="freebsd"  
         ['OS=="linux"', {
           'sources': [
             '<@(lib_sources_linux)',
--- a/atom/common/crash_reporter/crash_reporter.cc	2017-11-28 15:01:34.526505000 +0400
+++ b/atom/common/crash_reporter/crash_reporter.cc	2017-11-28 14:56:43.582430000 +0400
@@ -102,7 +102,11 @@
 #endif
 
 void CrashReporter::StartInstance(const mate::Dictionary& options) {
+#if !defined(OS_FREEBSD)
   auto reporter = GetInstance();
+#else
+  CrashReporter *reporter = NULL;
+#endif
   if (!reporter) return;
 
   std::string product_name;
--- a/atom/common/api/atom_api_crash_reporter.cc	2017-11-24 14:57:58.423424000 +0400
+++ b/atom/common/api/atom_api_crash_reporter.cc	2017-11-24 14:58:31.858654000 +0400
@@ -34,27 +34,38 @@
 // TODO(2.0) Remove
 void SetExtraParameter(const std::string& key, mate::Arguments* args) {
   std::string value;
+#if !defined(OS_FREEBSD)
   if (args->GetNext(&value))
     CrashReporter::GetInstance()->AddExtraParameter(key, value);
   else
     CrashReporter::GetInstance()->RemoveExtraParameter(key);
+#endif
 }
 
 void AddExtraParameter(const std::string& key, const std::string& value) {
+#if !defined(OS_FREEBSD)
   CrashReporter::GetInstance()->AddExtraParameter(key, value);
+#endif
 }
 
 void RemoveExtraParameter(const std::string& key) {
+#if !defined(OS_FREEBSD)
   CrashReporter::GetInstance()->RemoveExtraParameter(key);
+#endif
 }
 
 std::map<std::string, std::string> GetParameters() {
+#if !defined(OS_FREEBSD)
   return CrashReporter::GetInstance()->GetParameters();
+#else
+  return std::map<std::string, std::string>();
+#endif
 }
 
 void Initialize(v8::Local<v8::Object> exports, v8::Local<v8::Value> unused,
                 v8::Local<v8::Context> context, void* priv) {
   mate::Dictionary dict(context->GetIsolate(), exports);
+#if !defined(OS_FREEBSD)
   auto reporter = base::Unretained(CrashReporter::GetInstance());
   dict.SetMethod("start", base::Bind(&CrashReporter::Start, reporter));
   dict.SetMethod("setExtraParameter", &SetExtraParameter);
@@ -67,6 +78,7 @@
                  base::Bind(&CrashReporter::SetUploadToServer, reporter));
   dict.SetMethod("getUploadToServer",
                  base::Bind(&CrashReporter::GetUploadToServer, reporter));
+#endif
 }
 
 }  // namespace
diff --git a/script/build.py b/script/build.py
index 1a7378b..1209b25 100755
--- a/script/build.py
+++ b/script/build.py
@@ -22,7 +22,7 @@ def main():
   ninja = os.path.join('vendor', 'depot_tools', 'ninja')
   if sys.platform == 'win32':
     ninja += '.exe'
-
+  ninja='ninja'
   args = parse_args()
   for config in args.configuration:
     build_path = os.path.join('out', config[0])
diff --git a/script/create-dist.py b/script/create-dist.py
index 9d97744..3bdb266 100755
--- a/script/create-dist.py
+++ b/script/create-dist.py
@@ -61,6 +61,20 @@
     'natives_blob.bin',
     'snapshot_blob.bin',
   ],
+   'freebsd': [
+    PROJECT_NAME,  # 'electron'
+    'content_shell.pak',
+    'pdf_viewer_resources.pak',
+    'icudtl.dat',
+    'libffmpeg.so',
+    'libnode.so',
+    'blink_image_resources_200_percent.pak',
+    'content_resources_200_percent.pak',
+    'ui_resources_200_percent.pak',
+    'views_resources_200_percent.pak',
+    'natives_blob.bin',
+    'snapshot_blob.bin',
+  ],
 }
 TARGET_BINARIES_EXT = []
 TARGET_DIRECTORIES = {
@@ -75,6 +88,10 @@
     'resources',
     'locales',
   ],
+  'freebsd': [
+    'resources',
+    'locales',
+  ],
 }
 
 
@@ -83,7 +100,7 @@
   os.makedirs(DIST_DIR)
 
   force_build()
-  create_symbols()
+  #create_symbols()
   copy_binaries()
   copy_chrome_binary('chromedriver')
   copy_chrome_binary('mksnapshot')
@@ -98,15 +115,15 @@
     create_api_json_schema()
     create_typescript_definitions()
 
-  if PLATFORM == 'linux':
-    strip_binaries()
+  #if PLATFORM == 'linux':
+  strip_binaries()
 
   create_version()
   create_dist_zip()
   create_chrome_binary_zip('chromedriver', ELECTRON_VERSION)
   create_chrome_binary_zip('mksnapshot', ELECTRON_VERSION)
   create_ffmpeg_zip()
-  create_symbols_zip()
+  #create_symbols_zip()
 
 
 def force_build():
@@ -266,6 +283,8 @@
     ffmpeg_name = 'libffmpeg.dylib'
   elif PLATFORM == 'linux':
     ffmpeg_name = 'libffmpeg.so'
+  elif PLATFORM == 'freebsd':
+    ffmpeg_name = 'libffmpeg.so'
   elif PLATFORM == 'win32':
     ffmpeg_name = 'ffmpeg.dll'
 
diff --git a/script/lib/config.py b/script/lib/config.py
index 5ea60fc..217372a 100644
--- a/script/lib/config.py
+++ b/script/lib/config.py
@@ -15,6 +15,7 @@ PLATFORM = {
   'cygwin': 'win32',
   'darwin': 'darwin',
   'linux2': 'linux',
+  'freebsd11': 'freebsd',
   'win32': 'win32',
 }[sys.platform]
 
diff --git a/toolchain.gypi b/toolchain.gypi
index 1c5f8a7..a733b2e 100644
--- a/toolchain.gypi
+++ b/toolchain.gypi
@@ -101,8 +101,11 @@
         ['CXX.host', '$(CXX)'],
       ],
       'target_defaults': {
-        'cflags_cc': [
-          '-std=c++11',
+         'cflags_c' : [
+          '-isystem/usr/local/include/ -fPIC',
+        ],
+        'cflags_cc': [
+          ' -I/usr/local/include -fno-rtti  -pthread -std=c++11 -fPIC',
         ],
         'xcode_settings': {
           'CC': '<(make_clang_dir)/bin/clang',
--- a/brightray/brightray.gypi	2018-01-17 17:52:16.139123000 +0400
+++ b/brightray/brightray.gypi	2018-01-17 17:52:33.313204000 +0400
@@ -121,7 +121,7 @@
               'USE_NSS',  # deprecated after Chrome 45.
             ],
           }],
-          ['OS in ["linux", "mac"]', {
+          ['OS in ["linux", "mac", "freebsd"]', {
             'defines': [
               'WEBRTC_POSIX',
               'UCHAR_TYPE=uint16_t',
--- a/brightray/browser/browser_main_parts.cc	2018-01-17 17:55:26.895347000 +0400
+++ b/brightray/browser/browser_main_parts.cc	2018-01-17 17:54:48.566902000 +0400
@@ -167,7 +167,7 @@
 BrowserMainParts::~BrowserMainParts() {
 }
 
-#if defined(OS_WIN) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_FREEBSD)
 void OverrideAppLogsPath() {
   base::FilePath path;
   if (PathService::Get(brightray::DIR_APP_DATA, &path)) {

