diff --git a/brightray.gyp b/brightray.gyp
index d089dba..2c443f8 100644
--- a/brightray.gyp
+++ b/brightray.gyp
@@ -2,6 +2,7 @@
   'variables': {
     # The libraries brightray will be compiled to.
     'linux_system_libraries': 'gtk+-3.0 dbus-1 x11 x11-xcb xcb xi xcursor xdamage xrandr xcomposite xext xfixes xrender xtst xscrnsaver gconf-2.0 gmodule-2.0 nss',
+    'freebsd_system_libraries': 'gtk+-3.0 dbus-1 x11 x11-xcb xcb xi xcursor xdamage xrandr xcomposite xext xfixes xrender xtst xscrnsaver gconf-2.0 gmodule-2.0 nss',
     'conditions': [
       ['target_arch=="mips64el"', {
         'linux_system_libraries': '<(linux_system_libraries) libpulse',
@@ -40,6 +41,76 @@
       'sources': [ '<@(brightray_sources)' ],
       'conditions': [
         # Link with libraries of libchromiumcontent.
+         ['OS=="freebsd" and libchromiumcontent_component==0', {
+          # On Linux we have to use "--whole-archive" to force executable
+          # to include all symbols, otherwise we will have plenty of
+          # unresolved symbols errors.
+          'direct_dependent_settings': {
+            'libraries': [
+              '-Wl,--start-group',
+              '<@(libchromiumcontent_libraries)',
+              '-Wl,--whole-archive',
+              '<@(libchromiumcontent_v8_libraries)',
+              '-Wl,--no-whole-archive '
+              '-Wl,--end-group',
+            ],
+          },
+        }],  # (Normal builds)
+        ['OS=="freebsd"', {
+          'direct_dependent_settings': {
+            'cflags': [
+              '<!@(<(pkg-config) --cflags <(freebsd_system_libraries))',
+            ],
+          },
+          'link_settings': {
+            'ldflags': [
+              '<!@(<(pkg-config) --libs-only-L --libs-only-other <(freebsd_system_libraries))',
+            ],
+            'libraries': [
+              '-lpthread',
+              '<!@(<(pkg-config) --libs-only-l <(freebsd_system_libraries))',
+              '-lexecinfo -lkvm -lgconf-2 -lgio-2.0 ',
+              '-lxml2 -lfontconfig -lfreetype -lexpat -lharfbuzz -lpng16 -lcups ',
+              '-lspeechd -lm -lz -lrt  -ljpeg ',
+              '-lasound -lsnappy -lxslt -lcups -lspeechd -ldbus-1 -lFLAC '
+            ],
+          },
+          'cflags': [
+            '<!@(<(pkg-config) --cflags <(freebsd_system_libraries))',
+          ],
+          'conditions': [
+            ['libchromiumcontent_component', {
+              'link_settings': {
+                'libraries': [
+                  # Following libraries are always linked statically.
+                  '<(libchromiumcontent_dir)/libgtk2ui.a',
+                  '<(libchromiumcontent_dir)/libdevtools_discovery.a',
+                  '<(libchromiumcontent_dir)/libdevtools_http_handler.a',
+                  '<(libchromiumcontent_dir)/libhttp_server.a',
+                  '<(libchromiumcontent_dir)/libdesktop_capture.a',
+                  '<(libchromiumcontent_dir)/libdesktop_capture_differ_sse2.a',
+                  '<(libchromiumcontent_dir)/libsystem_wrappers.a',
+                  '<(libchromiumcontent_dir)/librtc_base.a',
+                  '<(libchromiumcontent_dir)/librtc_base_approved.a',
+                  '<(libchromiumcontent_dir)/libwebrtc_common.a',
+                  '<(libchromiumcontent_dir)/libyuv.a',
+                  '<(libchromiumcontent_dir)/libcdm_renderer.a',
+                  '<(libchromiumcontent_dir)/libsecurity_state.a',
+                ],
+              },
+            }, {
+              'link_settings': {
+                'libraries': [
+                  # Link with ffmpeg.
+                  '<(libchromiumcontent_dir)/libffmpeg.so',
+                  # Following libraries are required by libchromiumcontent:
+                  '-lexpat',
+                ],
+              },
+            }],
+          ],
+        }],  # (Normal builds)
+        
         ['OS=="linux" and libchromiumcontent_component==0', {
           # On Linux we have to use "--whole-archive" to force executable
           # to include all symbols, otherwise we will have plenty of
@@ -51,7 +121,9 @@
           }
         }, {  # (Release build on Linux)
           'link_settings': {
-            'libraries': [ '<@(libchromiumcontent_libraries)' ]
+            'libraries': [ 
+              '<@(libchromiumcontent_libraries)' ,
+            ]
           },
         }],  # (Normal builds)
         # Linux specific link settings.
diff --git a/browser/brightray_paths.h b/browser/brightray_paths.h
index 14c51ca..4a3d9dd 100644
--- a/browser/brightray_paths.h
+++ b/browser/brightray_paths.h
@@ -25,7 +25,7 @@ enum {
   DIR_USER_DATA = PATH_START,  // Directory where user data can be written.
   DIR_USER_CACHE,  // Directory where user cache can be written.
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
   DIR_APP_DATA,  // Application Data directory under the user profile.
 #else
   DIR_APP_DATA = base::DIR_APP_DATA,
diff --git a/browser/views/views_delegate.cc b/browser/views/views_delegate.cc
index a18d52a..f60ece6 100644
--- a/browser/views/views_delegate.cc
+++ b/browser/views/views_delegate.cc
@@ -7,7 +7,7 @@
 #include "ui/views/widget/desktop_aura/desktop_native_widget_aura.h"
 #include "ui/views/widget/native_widget_aura.h"
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
 #include "ui/views/linux_ui/linux_ui.h"
 #endif
 
@@ -59,7 +59,7 @@ bool ViewsDelegate::IsWindowInMetro(gfx::NativeWindow window) const {
   return false;
 }
 
-#elif defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#elif (defined(OS_LINUX) || defined(OS_FREEBSD)) && !defined(OS_CHROMEOS)
 gfx::ImageSkia* ViewsDelegate::GetDefaultWindowIcon() const {
   return NULL;
 }
@@ -105,7 +105,7 @@ base::TimeDelta ViewsDelegate::GetDefaultTextfieldObscuredRevealDuration() {
 }
 
 bool ViewsDelegate::WindowManagerProvidesTitleBar(bool maximized) {
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_FREEBSD)
   // On Ubuntu Unity, the system always provides a title bar for maximized
   // windows.
   views::LinuxUI* ui = views::LinuxUI::instance();
diff --git a/browser/views/views_delegate.h b/browser/views/views_delegate.h
index 157660a..f665a95 100644
--- a/browser/views/views_delegate.h
+++ b/browser/views/views_delegate.h
@@ -38,7 +38,7 @@ class ViewsDelegate : public views::ViewsDelegate {
   HICON GetDefaultWindowIcon() const override;
   HICON GetSmallWindowIcon() const override;
   bool IsWindowInMetro(gfx::NativeWindow window) const override;
-#elif defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#elif (defined(OS_LINUX) || defined(OS_FREEBSD)) && !defined(OS_CHROMEOS)
   gfx::ImageSkia* GetDefaultWindowIcon() const override;
 #endif
   views::NonClientFrameView* CreateDefaultNonClientFrameView(

